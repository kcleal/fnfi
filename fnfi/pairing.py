"""
Find the best path through a collection of alignments
Works with paried-end reads rather or single contigs. Borrows the pairing heuristic from bwa.
"""

import sys
import numpy as np
import os
import click
import align_path_c


def read_orientations(t, r1_len, r2_len):
    """
    # This code prooves that the orientation of the read dowesnt matter, only the order of the reads:
    # Permute all orientations, [AB|CD] + AB|DC, BA|DC, BA|CD
    ab, cd = [t[t[:, 7] == 1], t[t[:, 7] == 2]]

    # Make AB reversed
    ba = ab.copy()
    s, e = ba[:, 2].copy(), ba[:, 3].copy()
    ba[:, 2] = r1_l - e
    ba[:, 3] = r1_l - s
    ba = np.flipud(ba)

    # Make CD reversed
    dc = cd.copy()
    dc[:, 2:4] -= r1_l
    s, e = dc[:, 2].copy(), dc[:, 3].copy()
    dc[:, 2] = r2_l - e
    dc[:, 3] = r2_l - s
    dc[:, 2:4] += r1_l
    dc = np.flipud(dc)

    # Add combos
    ori.append(np.concatenate([ab, dc]))
    ori.append(np.concatenate([ba, dc]))
    ori.append(np.concatenate([ba, cd]))

    These 3 plus the original, produce two sets of identical paths; therefore only the order of reads is important
    """
    yield t

    read1_arr, read2_arr = [t[t[:, 7] == 1], t[t[:, 7] == 2]]
    read2_arr[:, 2:4] -= r1_len
    read1_arr[:, 2:4] += r2_len

    yield np.concatenate([read2_arr, read1_arr])


def process(rt):
    """
    Assumes that the reads are ordered read1 then read2, in the FR direction
    :param rt: Read_template object, contains all parameters within the pairing_params array
    """

    r1_len = rt['read1_length']
    r2_len = rt['read2_length']
    if not rt["paired_end"]:
        single_end = True
        contig_l = r1_len
    else:
        if r2_len is None and r1_len:
            single_end = True
            contig_l = r1_len
        elif r1_len is None and r2_len:
            single_end = True
            contig_l = r2_len
        elif r1_len is None and r2_len is None:
            return False
        else:
            single_end = False
            contig_l = r1_len + r2_len

    mu, sigma = rt['isize']

    pp = map(float, rt["pairing_params"])
    max_insertion = pp[0]
    min_aln = pp[1]
    max_homology = pp[2]
    ins_cost = pp[3]
    hom_cost = pp[4]  # 2
    inter_cost = pp[5]  # 10
    U = pp[6]
    match_score = rt["match_score"]

    args = [contig_l, mu, sigma, max_insertion, min_aln, max_homology, ins_cost,
            hom_cost, inter_cost, U, match_score]

    table = rt['data'][:, range(8)]

    if not single_end:

        # If it is unclear which read comes first this function can be used to generate both orientations:
        both_ways = []
        for r in read_orientations(table, r1_len, r2_len):
            a_res = align_path_c.optimal_path(r, *args)
            if len(a_res) > 0:
                if a_res[1] == a_res[4] and len(a_res[0]) == 2 and a_res[1] - a_res[2] > U:
                    # Cant do better. Normal pairing with 2 good alignments
                    return a_res
            both_ways.append(a_res)

        if len(both_ways) == 0:
            return False
        path, length, second_best, dis_to_normal, norm_pairings = sorted(both_ways, key=lambda x: x[1])[-1]  # Best

    else:
        path, length, second_best, dis_to_normal, norm_pairings = align_path_c.optimal_path(table, *args)

    if int(length) < int(second_best):
        sys.stderr.write("WARNING: primary path < secondary path\n")

    # Todo second best can be negative?
    return path, length, second_best, dis_to_normal, norm_pairings


if __name__ == "__main__":
    array = np.array
    rt = {'paired_end': 1, 'bias': 1.15, 'fq_read2_seq': 0, 'isize': (262.0, 115.39510809978374), 'read2_q': "DGGGEFDF0A?+GG8<CGEDGGF%CGAGFFFFFCFGGE'>GF=BFGFG4GAGGGCFFFGGG<EFGC@CFE1FGFE2FGFDFGGFGDEGGECGEECDFCGFGE@GDG5GGFGFGGGB;GFCCFFFG", 'max_d': 723.5804323991349, 'read2_seq': 'AAGAGAAACCTGGCACCATAAGTACAGATTAGGGCAGAGAAAGACATTCAAAAGAGGCAGCTGCAGTAGATACAAACGTGACTGCTGTCAGCCTGGAGAAGCTAAAGTTCTACAGTGATGAGACT', 'chrom_ids': {'chr7': 3, 'chr6': 14, 'chr5': 4, 'chr4': 12, 'chr3': 8, 'chr2': 6, 'chr1': 2, 'chr14': 10, 'chrY': 15, 'chr8': 5, 'chr13': 11, 'chr12': 16, 'chr11': 13, 'chr10': 7, 'chr22': 1, 'chr16': 9, 'chr21': 0, 'chr9': 17, 'chr19': 18}, 'read2_length': 125, 'passed': 0, 'replace_hard': 0, 'read2_reverse': 1, 'inputdata': [['99', 'chr21', '46697431', '0', '125M', '=', '46697642', '306', 'GGCAGGAGAATGGCGTGAACCCGGGAAGTGGAGCTTGCATTGAGCCGAGATTGCGCCACTGCAGTCCGCAGTCCGGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAAAAAAAAAAAAAAAAAG', 'EEGDFGFFFCGGE9@GFG6FGFGFGEFDGBGECGGFFDFGGGGG=GF@EFF<G=FFGG;1GG:4AFGFEGGGCFGGFF0DFGEFEFFGGGGB0:/GGGEF<CGFG3?B?A>@FCFCEGEGGF7BF', 'NM:i:0', 'MD:Z:125', 'AS:i:125', 'XS:i:125'], ['355', 'chr22', '50805788', '0', '125M', 'chr21', '46697642', '0', '*', '*', 'NM:i:0', 'MD:Z:125', 'AS:i:125'], ['355', 'chr1', '248943534', '0', '125M', 'chr21', '46697642', '0', '*', '*', 'NM:i:1', 'MD:Z:124A0', 'AS:i:124'], ['355', 'chr7', '128962268', '0', '125M', 'chr21', '46697642', '0', '*', '*', 'NM:i:1', 'MD:Z:39G85', 'AS:i:120'], ['371', 'chr1', '28252908', '0', '125M', 'chr21', '46697642', '0', '*', '*', 'NM:i:1', 'MD:Z:85C39', 'AS:i:120'], ['371', 'chr5', '78981914', '0', '125M', 'chr21', '46697642', '0', '*', '*', 'NM:i:2', 'MD:Z:85C10G28', 'AS:i:115'], ['371', 'chr8', '91699978', '0', '125M', 'chr21', '46697642', '0', '*', '*', 'NM:i:2', 'MD:Z:85C10G28', 'AS:i:115'], ['355', 'chr2', '58134514', '0', '125M', 'chr21', '46697642', '0', '*', '*', 'NM:i:2', 'MD:Z:28C10G85', 'AS:i:115'], ['355', 'chr10', '93347455', '0', '125M', 'chr21', '46697642', '0', '*', '*', 'NM:i:2', 'MD:Z:28C10G85', 'AS:i:115'], ['371', 'chr10', '84716288', '0', '125M', 'chr21', '46697642', '0', '*', '*', 'NM:i:2', 'MD:Z:85C10G28', 'AS:i:115'], ['355', 'chr3', '125181504', '0', '125M', 'chr21', '46697642', '0', '*', '*', 'NM:i:2', 'MD:Z:28C10G85', 'AS:i:115'], ['371', 'chr16', '30799201', '0', '125M', 'chr21', '46697642', '0', '*', '*', 'NM:i:2', 'MD:Z:85C10G28', 'AS:i:115'], ['355', 'chr2', '187366146', '0', '125M', 'chr21', '46697642', '0', '*', '*', 'NM:i:2', 'MD:Z:28C10G85', 'AS:i:115'], ['355', 'chr8', '123753183', '0', '125M', 'chr21', '46697642', '0', '*', '*', 'NM:i:2', 'MD:Z:28C10G85', 'AS:i:115'], ['371', 'chr7', '148942840', '0', '125M', 'chr21', '46697642', '0', '*', '*', 'NM:i:2', 'MD:Z:85C10G28', 'AS:i:115'], ['371', 'chr14', '33446166', '0', '125M', 'chr21', '46697642', '0', '*', '*', 'NM:i:2', 'MD:Z:85C10G28', 'AS:i:115'], ['355', 'chr3', '184099617', '0', '125M', 'chr21', '46697642', '0', '*', '*', 'NM:i:2', 'MD:Z:28C10G85', 'AS:i:115'], ['355', 'chr1', '149272781', '0', '125M', 'chr21', '46697642', '0', '*', '*', 'NM:i:2', 'MD:Z:28C10G85', 'AS:i:115'], ['371', 'chr8', '67681200', '0', '125M', 'chr21', '46697642', '0', '*', '*', 'NM:i:2', 'MD:Z:85C10G28', 'AS:i:115'], ['355', 'chr13', '90507914', '0', '125M', 'chr21', '46697642', '0', '*', '*', 'NM:i:2', 'MD:Z:28C10G85', 'AS:i:115'], ['355', 'chr7', '96438394', '0', '125M', 'chr21', '46697642', '0', '*', '*', 'NM:i:2', 'MD:Z:28C10G85', 'AS:i:115'], ['371', 'chr1', '44984797', '0', '125M', 'chr21', '46697642', '0', '*', '*', 'NM:i:2', 'MD:Z:85C10G28', 'AS:i:115'], ['371', 'chr7', '45629509', '0', '125M', 'chr21', '46697642', '0', '*', '*', 'NM:i:2', 'MD:Z:85C10G28', 'AS:i:115'], ['355', 'chr4', '99477068', '0', '125M', 'chr21', '46697642', '0', '*', '*', 'NM:i:2', 'MD:Z:28C10G85', 'AS:i:115'], ['355', 'chr1', '67362469', '0', '125M', 'chr21', '46697642', '0', '*', '*', 'NM:i:2', 'MD:Z:28C10G85', 'AS:i:115'], ['355', 'chr11', '6121332', '0', '125M', 'chr21', '46697642', '0', '*', '*', 'NM:i:2', 'MD:Z:28C10G85', 'AS:i:115'], ['371', 'chr1', '148857359', '0', '125M', 'chr21', '46697642', '0', '*', '*', 'NM:i:2', 'MD:Z:85C10G28', 'AS:i:115'], ['355', 'chr6', '46019589', '0', '125M', 'chr21', '46697642', '0', '*', '*', 'NM:i:2', 'MD:Z:28C10G85', 'AS:i:115'], ['355', 'chr7', '55932791', '0', '4S121M', 'chr21', '46697642', '0', '*', '*', 'NM:i:2', 'MD:Z:24C10G85', 'AS:i:111'], ['371', 'chrY', '4409160', '0', '125M', 'chr21', '46697642', '0', '*', '*', 'NM:i:3', 'MD:Z:85C10G24C3', 'AS:i:111'], ['355', 'chr5', '5229201', '0', '125M', 'chr21', '46697642', '0', '*', '*', 'NM:i:3', 'MD:Z:14A13C10G85', 'AS:i:110'], ['371', 'chr12', '122237534', '0', '125M', 'chr21', '46697642', '0', '*', '*', 'NM:i:3', 'MD:Z:85C10G1C26', 'AS:i:110'], ['371', 'chr2', '68461287', '0', '125M', 'chr21', '46697642', '0', '*', '*', 'NM:i:3', 'MD:Z:85C10G1C26', 'AS:i:110'], ['371', 'chr9', '16059505', '0', '125M', 'chr21', '46697642', '0', '*', '*', 'NM:i:3', 'MD:Z:85C10G6A21', 'AS:i:110'], ['371', 'chr5', '159162425', '0', '125M', 'chr21', '46697642', '0', '*', '*', 'NM:i:3', 'MD:Z:85C10G11T16', 'AS:i:110'], ['371', 'chr5', '33355480', '0', '125M', 'chr21', '46697642', '0', '*', '*', 'NM:i:3', 'MD:Z:85C10G1C26', 'AS:i:110'], ['147', 'chr21', '46697642', '3', '95M30S', '=', '46697431', '-306', 'AAGAGAAACCTGGCACCATAAGTACAGATTAGGGCAGAGAAAGACATTCAAAAGAGGCAGCTGCAGTAGATACAAACGTGACTGCTGTCAGCCTGGAGAAGCTAAAGTTCTACAGTGATGAGACT', "DGGGEFDF0A?+GG8<CGEDGGF%CGAGFFFFFCFGGE'>GF=BFGFG4GAGGGCFFFGGG<EFGC@CFE1FGFE2FGFDFGGFGDEGGECGEECDFCGFGE@GDG5GGFGFGGGB;GFCCFFFG", 'NM:i:0', 'MD:Z:95', 'AS:i:95', 'XS:i:90', 'SA:Z:chr1,12796396,-,95S30M,2,0;'], ['403', 'chr13', '114352105', '0', '95M30S', 'chr21', '46697431', '0', '*', '*', 'NM:i:1', 'MD:Z:82C12', 'AS:i:90'], ['387', 'chr8', '207706', '0', '30S95M', 'chr21', '46697431', '0', '*', '*', 'NM:i:1', 'MD:Z:34C60', 'AS:i:90'], ['403', 'chr19', '58605718', '0', '95M30S', 'chr21', '46697431', '0', '*', '*', 'NM:i:1', 'MD:Z:82C12', 'AS:i:90'], ['403', 'chr1', '248943751', '0', '95M30S', 'chr21', '46697431', '0', '*', '*', 'NM:i:1', 'MD:Z:82C12', 'AS:i:90'], ['387', 'chr19', '247911', '0', '30S95M', 'chr21', '46697431', '0', '*', '*', 'NM:i:1', 'MD:Z:34C60', 'AS:i:90'], ['403', 'chr2', '242181360', '0', '95M30S', 'chr21', '46697431', '0', '*', '*', 'NM:i:1', 'MD:Z:82C12', 'AS:i:90'], ['403', 'chr10', '133785269', '0', '95M30S', 'chr21', '46697431', '0', '*', '*', 'NM:i:1', 'MD:Z:82C12', 'AS:i:90'], ['403', 'chr22', '50805999', '0', '95M30S', 'chr21', '46697431', '0', '*', '*', 'NM:i:1', 'MD:Z:82C12', 'AS:i:90'], ['2195', 'chr1', '12796396', '2', '95S30M', 'chr21', '46697431', '0', 'AAGAGAAACCTGGCACCATAAGTACAGATTAGGGCAGAGAAAGACATTCAAAAGAGGCAGCTGCAGTAGATACAAACGTGACTGCTGTCAGCCTGGAGAAGCTAAAGTTCTACAGTGATGAGACT', "DGGGEFDF0A?+GG8<CGEDGGF%CGAGFFFFFCFGGE'>GF=BFGFG4GAGGGCFFFGGG<EFGC@CFE1FGFE2FGFDFGGFGDEGGECGEECDFCGFGE@GDG5GGFGFGGGB;GFCCFFFG", 'NM:i:0', 'MD:Z:30', 'AS:i:30', 'XS:i:28', 'SA:Z:chr21,46697642,-,95M30S,3,0;']], 'fq_read1_q': 0, 'fq_read2_q': 0, 'read1_reverse': 0, 'read1_q': 'EEGDFGFFFCGGE9@GFG6FGFGFGEFDGBGECGGFFDFGGGGG=GF@EFF<G=FFGG;1GG:4AFGFEGGGCFGGFF0DFGEFEFFGGGGB0:/GGGEF<CGFG3?B?A>@FCFCEGEGGF7BF', 'read1_length': 125, 'data': array([[ 0.00000000e+00,  4.66974310e+07,  0.00000000e+00,
         1.25000000e+02,  1.43749997e+02,  0.00000000e+00,
         1.00000000e+00,  1.00000000e+00,  0.00000000e+00],
       [ 1.00000000e+00,  5.08057880e+07,  0.00000000e+00,
         1.25000000e+02,  1.25000000e+02,  1.00000000e+00,
         1.00000000e+00,  1.00000000e+00,  0.00000000e+00],
       [ 2.00000000e+00,  2.48943534e+08,  0.00000000e+00,
         1.25000000e+02,  1.24000000e+02,  2.00000000e+00,
         1.00000000e+00,  1.00000000e+00,  0.00000000e+00],
       [ 3.00000000e+00,  1.28962268e+08,  0.00000000e+00,
         1.25000000e+02,  1.20000000e+02,  3.00000000e+00,
         1.00000000e+00,  1.00000000e+00,  0.00000000e+00],
       [ 2.00000000e+00,  2.82529080e+07,  0.00000000e+00,
         1.25000000e+02,  1.20000000e+02,  4.00000000e+00,
        -1.00000000e+00,  1.00000000e+00,  0.00000000e+00],
       [ 4.00000000e+00,  7.89819140e+07,  0.00000000e+00,
         1.25000000e+02,  1.15000000e+02,  5.00000000e+00,
        -1.00000000e+00,  1.00000000e+00,  0.00000000e+00],
       [ 5.00000000e+00,  9.16999780e+07,  0.00000000e+00,
         1.25000000e+02,  1.15000000e+02,  6.00000000e+00,
        -1.00000000e+00,  1.00000000e+00,  0.00000000e+00],
       [ 6.00000000e+00,  5.81345140e+07,  0.00000000e+00,
         1.25000000e+02,  1.15000000e+02,  7.00000000e+00,
         1.00000000e+00,  1.00000000e+00,  0.00000000e+00],
       [ 7.00000000e+00,  9.33474550e+07,  0.00000000e+00,
         1.25000000e+02,  1.15000000e+02,  8.00000000e+00,
         1.00000000e+00,  1.00000000e+00,  0.00000000e+00],
       [ 7.00000000e+00,  8.47162880e+07,  0.00000000e+00,
         1.25000000e+02,  1.15000000e+02,  9.00000000e+00,
        -1.00000000e+00,  1.00000000e+00,  0.00000000e+00],
       [ 8.00000000e+00,  1.25181504e+08,  0.00000000e+00,
         1.25000000e+02,  1.15000000e+02,  1.00000000e+01,
         1.00000000e+00,  1.00000000e+00,  0.00000000e+00],
       [ 9.00000000e+00,  3.07992010e+07,  0.00000000e+00,
         1.25000000e+02,  1.15000000e+02,  1.10000000e+01,
        -1.00000000e+00,  1.00000000e+00,  0.00000000e+00],
       [ 6.00000000e+00,  1.87366146e+08,  0.00000000e+00,
         1.25000000e+02,  1.15000000e+02,  1.20000000e+01,
         1.00000000e+00,  1.00000000e+00,  0.00000000e+00],
       [ 5.00000000e+00,  1.23753183e+08,  0.00000000e+00,
         1.25000000e+02,  1.15000000e+02,  1.30000000e+01,
         1.00000000e+00,  1.00000000e+00,  0.00000000e+00],
       [ 3.00000000e+00,  1.48942840e+08,  0.00000000e+00,
         1.25000000e+02,  1.15000000e+02,  1.40000000e+01,
        -1.00000000e+00,  1.00000000e+00,  0.00000000e+00],
       [ 1.00000000e+01,  3.34461660e+07,  0.00000000e+00,
         1.25000000e+02,  1.15000000e+02,  1.50000000e+01,
        -1.00000000e+00,  1.00000000e+00,  0.00000000e+00],
       [ 8.00000000e+00,  1.84099617e+08,  0.00000000e+00,
         1.25000000e+02,  1.15000000e+02,  1.60000000e+01,
         1.00000000e+00,  1.00000000e+00,  0.00000000e+00],
       [ 2.00000000e+00,  1.49272781e+08,  0.00000000e+00,
         1.25000000e+02,  1.15000000e+02,  1.70000000e+01,
         1.00000000e+00,  1.00000000e+00,  0.00000000e+00],
       [ 5.00000000e+00,  6.76812000e+07,  0.00000000e+00,
         1.25000000e+02,  1.15000000e+02,  1.80000000e+01,
        -1.00000000e+00,  1.00000000e+00,  0.00000000e+00],
       [ 1.10000000e+01,  9.05079140e+07,  0.00000000e+00,
         1.25000000e+02,  1.15000000e+02,  1.90000000e+01,
         1.00000000e+00,  1.00000000e+00,  0.00000000e+00],
       [ 3.00000000e+00,  9.64383940e+07,  0.00000000e+00,
         1.25000000e+02,  1.15000000e+02,  2.00000000e+01,
         1.00000000e+00,  1.00000000e+00,  0.00000000e+00],
       [ 2.00000000e+00,  4.49847970e+07,  0.00000000e+00,
         1.25000000e+02,  1.15000000e+02,  2.10000000e+01,
        -1.00000000e+00,  1.00000000e+00,  0.00000000e+00],
       [ 3.00000000e+00,  4.56295090e+07,  0.00000000e+00,
         1.25000000e+02,  1.15000000e+02,  2.20000000e+01,
        -1.00000000e+00,  1.00000000e+00,  0.00000000e+00],
       [ 1.20000000e+01,  9.94770680e+07,  0.00000000e+00,
         1.25000000e+02,  1.15000000e+02,  2.30000000e+01,
         1.00000000e+00,  1.00000000e+00,  0.00000000e+00],
       [ 2.00000000e+00,  6.73624690e+07,  0.00000000e+00,
         1.25000000e+02,  1.15000000e+02,  2.40000000e+01,
         1.00000000e+00,  1.00000000e+00,  0.00000000e+00],
       [ 1.30000000e+01,  6.12133200e+06,  0.00000000e+00,
         1.25000000e+02,  1.15000000e+02,  2.50000000e+01,
         1.00000000e+00,  1.00000000e+00,  0.00000000e+00],
       [ 2.00000000e+00,  1.48857359e+08,  0.00000000e+00,
         1.25000000e+02,  1.15000000e+02,  2.60000000e+01,
        -1.00000000e+00,  1.00000000e+00,  0.00000000e+00],
       [ 1.40000000e+01,  4.60195890e+07,  0.00000000e+00,
         1.25000000e+02,  1.15000000e+02,  2.70000000e+01,
         1.00000000e+00,  1.00000000e+00,  0.00000000e+00],
       [ 1.50000000e+01,  4.40916000e+06,  0.00000000e+00,
         1.25000000e+02,  1.11000000e+02,  2.90000000e+01,
        -1.00000000e+00,  1.00000000e+00,  0.00000000e+00],
       [ 4.00000000e+00,  5.22920100e+06,  0.00000000e+00,
         1.25000000e+02,  1.10000000e+02,  3.00000000e+01,
         1.00000000e+00,  1.00000000e+00,  0.00000000e+00],
       [ 1.60000000e+01,  1.22237534e+08,  0.00000000e+00,
         1.25000000e+02,  1.10000000e+02,  3.10000000e+01,
        -1.00000000e+00,  1.00000000e+00,  0.00000000e+00],
       [ 6.00000000e+00,  6.84612870e+07,  0.00000000e+00,
         1.25000000e+02,  1.10000000e+02,  3.20000000e+01,
        -1.00000000e+00,  1.00000000e+00,  0.00000000e+00],
       [ 1.70000000e+01,  1.60595050e+07,  0.00000000e+00,
         1.25000000e+02,  1.10000000e+02,  3.30000000e+01,
        -1.00000000e+00,  1.00000000e+00,  0.00000000e+00],
       [ 4.00000000e+00,  1.59162425e+08,  0.00000000e+00,
         1.25000000e+02,  1.10000000e+02,  3.40000000e+01,
        -1.00000000e+00,  1.00000000e+00,  0.00000000e+00],
       [ 4.00000000e+00,  3.33554800e+07,  0.00000000e+00,
         1.25000000e+02,  1.10000000e+02,  3.50000000e+01,
        -1.00000000e+00,  1.00000000e+00,  0.00000000e+00],
       [ 3.00000000e+00,  5.59327910e+07,  4.00000000e+00,
         1.25000000e+02,  1.11000000e+02,  2.80000000e+01,
         1.00000000e+00,  1.00000000e+00,  0.00000000e+00],
       [ 0.00000000e+00,  4.66976420e+07,  1.25000000e+02,
         2.20000000e+02,  1.09249998e+02,  3.60000000e+01,
        -1.00000000e+00,  2.00000000e+00,  0.00000000e+00],
       [ 1.10000000e+01,  1.14352105e+08,  1.25000000e+02,
         2.20000000e+02,  9.00000000e+01,  3.70000000e+01,
        -1.00000000e+00,  2.00000000e+00,  0.00000000e+00],
       [ 5.00000000e+00,  2.07706000e+05,  1.25000000e+02,
         2.20000000e+02,  9.00000000e+01,  3.80000000e+01,
         1.00000000e+00,  2.00000000e+00,  0.00000000e+00],
       [ 1.80000000e+01,  5.86057180e+07,  1.25000000e+02,
         2.20000000e+02,  9.00000000e+01,  3.90000000e+01,
        -1.00000000e+00,  2.00000000e+00,  0.00000000e+00],
       [ 2.00000000e+00,  2.48943751e+08,  1.25000000e+02,
         2.20000000e+02,  9.00000000e+01,  4.00000000e+01,
        -1.00000000e+00,  2.00000000e+00,  0.00000000e+00],
       [ 1.80000000e+01,  2.47911000e+05,  1.25000000e+02,
         2.20000000e+02,  9.00000000e+01,  4.10000000e+01,
         1.00000000e+00,  2.00000000e+00,  0.00000000e+00],
       [ 6.00000000e+00,  2.42181360e+08,  1.25000000e+02,
         2.20000000e+02,  9.00000000e+01,  4.20000000e+01,
        -1.00000000e+00,  2.00000000e+00,  0.00000000e+00],
       [ 7.00000000e+00,  1.33785269e+08,  1.25000000e+02,
         2.20000000e+02,  9.00000000e+01,  4.30000000e+01,
        -1.00000000e+00,  2.00000000e+00,  0.00000000e+00],
       [ 1.00000000e+00,  5.08059990e+07,  1.25000000e+02,
         2.20000000e+02,  9.00000000e+01,  4.40000000e+01,
        -1.00000000e+00,  2.00000000e+00,  0.00000000e+00],
       [ 2.00000000e+00,  1.27963960e+07,  2.20000000e+02,
         2.50000000e+02,  3.00000000e+01,  4.50000000e+01,
        -1.00000000e+00,  2.00000000e+00,  0.00000000e+00]]), 'name': 'simulated_reads.0.2-id247_A_chr21:46697736_B_chr1:12796395-6843', 'fq_read1_seq': 0, 'match_score': 1.0, 'read1_seq': 'GGCAGGAGAATGGCGTGAACCCGGGAAGTGGAGCTTGCATTGAGCCGAGATTGCGCCACTGCAGTCCGCAGTCCGGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAAAAAAAAAAAAAAAAAG', 'last_seen_chrom': 'chr1', 'score_mat': {}, 'pairing_params': (150.0, 17.0, 150.0, 0.05, 1.05, 2.0, 9.0)}

    print(process(rt))

    for row in rt["data"]:
        print list(row.astype(int))

